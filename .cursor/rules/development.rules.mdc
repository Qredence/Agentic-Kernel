# AgenticFleet Development Rules

## Project Structure
```rules
directory_structure:
  - src/agenticfleet:
    - agents/: Agent implementations
    - plugins/: Plugin modules
    - config/: Configuration files
    - utils/: Utility functions
    - workflows/: Agent workflows
  - tests/:
    - agents/: Agent tests
    - plugins/: Plugin tests
    - workflows/: Workflow tests
  - .cursor/: Cursor IDE configuration
  - docs/: Documentation
```

## Code Style
```rules
style:
  python:
    - follow: PEP 8
    - max_line_length: 100
    - quotes: single
    - docstrings: Google style
    - imports:
      - group_order: [stdlib, third_party, local]
      - sort_within_groups: true
  
  naming:
    - classes: PascalCase
    - functions: snake_case
    - variables: snake_case
    - constants: UPPER_SNAKE_CASE
    - private: _prefix
```

## Testing
```rules
testing:
  required:
    - unit_tests: true
    - integration_tests: true
    - coverage_min: 80%
  
  patterns:
    - test_files: test_*.py
    - test_classes: Test*
    - test_functions: test_*
    
  frameworks:
    - pytest
    - pytest-asyncio
    - pytest-cov
```

## Documentation
```rules
documentation:
  required:
    - module_docstrings: true
    - class_docstrings: true
    - function_docstrings: true
    - complex_logic_comments: true
    
  formats:
    - README.md: Project overview
    - CONTRIBUTING.md: Contribution guidelines
    - API.md: API documentation
    - CHANGELOG.md: Version history
```

## Version Control
```rules
git:
  branches:
    - main: Production ready code
    - develop: Development branch
    - feature/*: New features
    - bugfix/*: Bug fixes
    
  commits:
    - format: "<type>(<scope>): <description>"
    - types: [feat, fix, docs, style, refactor, test, chore]
    - max_length: 72
```

## Configuration
```rules
config:
  env_files:
    - .env: Local development
    - .env.test: Testing environment
    
  settings:
    - sensitive_data: environment variables
    - app_config: JSON files
    - cursor_config: ~/.cursor/mcp.json
```

## Dependencies
```rules
dependencies:
  management:
    - tool: pip
    - file: pyproject.toml
    - lock: poetry.lock
    
  versioning:
    - format: ^x.y.z
    - pin_versions: true
    - update_frequency: monthly
```

## Security
```rules
security:
  required:
    - input_validation: true
    - error_handling: true
    - credential_protection: true
    
  practices:
    - no_secrets_in_code: true
    - secure_dependencies: true
    - regular_updates: true
```

## LLM Integration
```rules
llm:
  providers:
    - azure_openai:
        default: true
        models: [gpt-4o, gpt-4o-mini, o3-mini]
    - azure_foundry:
        models: [deepseek-r1, deepseek-v3, phi-4]
    - gemini:
        models: [gemini-2.0-pro, gemini-2.0-flash]
        
  configuration:
    - endpoint_config: required
    - model_validation: true
    - fallback_handling: true
```

## Plugin Development
```rules
plugins:
  structure:
    - interface: required
    - implementation: required
    - tests: required
    - documentation: required
    
  patterns:
    - naming: *Plugin
    - registration: auto-discovery
    - configuration: JSON
```

## Agent Development
```rules
agents:
  structure:
    - base_class: required
    - interface: required
    - implementation: required
    - tests: required
    
  patterns:
    - naming: *Agent
    - configuration: YAML
    - state_management: required
``` 